ELF Injection
=============

* The basic idea to corrupt (or infect) an executable
  is to modify or inject code (binary!)
  for Unix/Linux, the standard file format is ELF
  
* So one should have a clear understanding of the internal
  structure of the ELF file format, and techniques to
  handle it
  
* ELF format
  highly structured data
  basically, a group of structures in C terminology
  // data structure:
    #define EI_NIDENT 16 
    typedef struct{ 
      unsigned char e_ident[EI_NIDENT]; 
      Elf32_Half e_type; 
      Elf32_Half e_machine; 
      Elf32_Word e_version; 
      Elf32_Addr e_entry; 
      Elf32_Off  e_phoff; 
      Elf32_Off  e_shoff;
      Elf32_Word e_flags; 
      Elf32_Half e_ehsize; 
      Elf32_Half e_phentsize; 
      Elf32_Half e_phnum; 
      Elf32_Half e_shentsize; 
      Elf32_Half e_shnum; 
      Elf32_Half e_shstrndx; 
    }Elf32_Ehdr;
    
  there are two views for and ELF file: linking and loading
  for the purpose of loading, the "program head table (pht)" is
  of significance
  // data structure:
  typedef struct { 
    Elf32_Word p_type; 
    Elf32_Off p_offset; 
    Elf32_Addr p_vaddr; 
    Elf32_Addr p_paddr; 
    Elf32_Word p_filesz; 
    Elf32_Word p_memsz; 
    Elf32_Word p_flags; 
    Elf32_Word p_align; 
  } Elf32_phdr;
  
  Next, I'll walk through an example
    $ cat hello.c
      int main(){
        printf ("hello, world\n");
        return 0;
      }
    $ gcc hello.c -o hello
    $ cat hello
    [discussion...]

* code vs data
  code is data is code is data is code ...
  
* self-modifying code (SMC)
  but don't forget the the protection mechanism
  
* attach #1: corrupt a file
  just modify the magic number
Same-origin Policy
==================

* Today's topic: protection and separation of sites in browsers
  * the overall plan is called same-origin policy (SOP)

* Threat model / assumptions.
  * Attacker controls a malicious web site, attacker.com.
    * You visit the attacker's web site, for whatever reasons.
  * You are using the browser for other things (e-mail, bank, &c).
  * Browser is trusted, so we can design it to contain attacks.
  * Browser doesn't have implementation bugs (e.g., buffer overflows).

* Questions:
  * can the malicious web site read your local files, or access your networks?
    * the good news: the browser does not allow the malicious web site do such things
      * that is, the JS code runs in a sandbox
      * the browser implement sandbox and separation
  * can the malicious web site read your emails? access your browsing history? use your credit card?
    change the page display in other windows? &c
    * answers are generally NO for these cases
      * the basic protection model is same-origin policy (SOP)
    * but there are other bad things can be pretty evil

* SOP:
  * each identity is Web is attached with an origin
  * origin = <scheme, host, port>
  * intuitively, an origin indicates where the page came from
    * all resources on a same server share the same origin
  * two origins are same iff two tuples are the SAME
  * examples:
    * http://www.foo.com/a/b/c.html  https://www.foo.com/d/e/f.html
    * http://www.foo.com:8080/       http://www.foo.com
    * http://www.foo.com/            http://foo.com
  * the SOP rule:
    * a script can access a resource, iff they have the same origin
  a good example is file access control
  
* How does the SOP work?
  * mostly, it's automatically enforced by the browsers
    * always OK, or always NO
    * without users' participation (transparent)
  * we must have a trustworthy browser!
    
* SOP for browser local storage
  * cookies
    * server keep state in the browsers
      * for shopping cart, ad tracking, user authentication, &c.
    * server sets with Set-Cookie:
      * Set-Cookie: key=value
    * the browser saves the cookie in its local storage
    * the browser sends back cookies in each request
    * the server can also specify a domain, example: domain=foo.com
      * the browser sends back cookies for a suffix of the domain:
    * a typical setup:
      * you log in a site: foo.com
      * you input user name & passwd, the server verifies these and sends back a cookie:
        Set-Cookie: sessionid=as23sasdasdfwqweroiopiuouxasdfupwe
      * when the server gets this sessionid, it looks up in the DB, to find user
        * this is called a session cookie
  * JS cannot access cookies as enforced by SOP
    * also applies to other kind of local storages, like DBs, SQL, &c.

* SOP for XMLHttpRequest()
  * think XMLHttpRequest(url) as a remote call for JS, to get data (or Web API)
  * can one site, say abc.com, send requests to another site, say xyz.com?
    * NO! SOP enforces that XMLHttpRequest(url) can only send requests to sites with same origins

* is this the end of the whole story?
  * no! this will create a full isolated world!
  * there may be the need for "meshup" pages: pages combine data from several sources
    * Example: maps, calendars, advertisements, social media widgets, &c.
  * so there are many exceptions to this basic SOP rule

* SOP exception: ordinary links
  * example: attacker.com contains an ordinary link to foo.com (href)
    * And such a click will navigate the user to foo.com.
    * this is called a cross-site request
  * Why this exception?
    * These links are a big part of how people find stuff on the web.
    * Usually inter-domain links are harmless.
  * BUT the browser will send cookies (if any) to foo.com
    * So the link is followed as the foo user.
      * to discuss more in the cross-site request forgery (CSRF) attack.

* SOP exception: img
  * attacker.com page can contain <img src="https://foo.com/x.gif">
    * Browser will fetch and display the image, automatically, despite different origins.
  * Why this exception?
    * Avoid lots of copies of commonly-used images.
    * Allow easy incorporation of image content.
  * Can an attacker.com page steal content this way?
    * E.g. read image's content?
    * No: browser does enforce SOP to the retrieved pixels.
    * User sees image, but not attack.com page.
  * BUT the browser will send cookies for foo.com.
    * So foo.com may grant attacker's request my permissions.
      * This is a problem!

* SOP exception: iframe
  * attacker.com page can load and display a page in a rectangle
    * example: <iframe src="https://foo.com/">
    * Browser will fetch and display the page, automatically, despite different origins.
  * Why this exception?
    * advertisement, social medias, &c.
    * but SOP protect against the interaction between the two pages: attacker.com vs foo.com
      * so the iframes are rather safe.
  * H5 introduces more APIs for the interactions with iframes

* SOP exception: script
  * attacker.com page can load and run scripts
    * example: <script src="https://evil.com/a.js">
    * Browser will fetch and run the JS code, automatically, despite different origins.
  * Why this exception?
    * users want to reuse existing JS libraries
  * what's the privilege of the running JS code?
    * foo.com? attacker.com?
    * of the running site, that is, attacker.com
    * intuition: the JS code is just like libraries
    * so must be careful about load 3rd party libraries

* SOP exception: Cross Origin Resource Sharing (CORS)
  * Recall that SOP forbids cross origin data fetching
  * but a server can tell the browser to allow some cross-origin XMLHttpRequest(url).
  * If browser sees a page's request is cross-origin, it asks server
    first, tells server requesting origin, server can say yes or no.
  * Why this exception?
    * Some web API data is public.
    * Some specific mash-ups are intentionally authorized.
  * Example:
    * suppose the site abc.com wants to fetch data at the site xyz.com, via XMLHttpRequest()
    * the code in abc.com looks like:
      const xhr = new XMLHttpRequest();
      const url = 'http://xyz.com/';

      xhr.open('GET', url);
      xhr.onreadystatechange = someHandler;
      xhr.send();

      browser                         server
          ---------------------------->
          GET / HTTP/1.1
          Origin: abc.com

          <----------------------------
                HTTP/1.1 200 OK
                Access-Control-Allow-Origin: *

    the * in the response means that the resources can be accessed by any origin
    this pattern of Origin and Access-Control-Allow-Origin is the simplest form of access control
    if the server only want to share the resource with "foo.com", it can set the response:
      Access-Control-Allow-Origin: http://foo.com
  * preflight HTTP request:
    * for more complex HTTP requests like POST, a preflight request may be sent, to determine
      whether this request is allowed by the server
      * example:
        const xhr = new XMLHttpRequest();
        xhr.open('POST', 'https://bar.com/');
        xhr.setRequestHeader('X-PINGOTHER', 'pingpong');
        xhr.setRequestHeader('Content-Type', 'application/xml');
        xhr.onreadystatechange = handler;
        xhr.send('<person><name>Arun</name></person>');

        browser                                        server
        ------------------------------------------------->
        OPTIONS / HTTP/1.1
        origin: http://foo.com
        Access-Control-Request-Method: POST
        ...

        <-------------------------------------------------
                                   HTTP/1.1 204 No Content
               Access-Control-Allow-Origin: http://foo.com
            Access-Control-Allow-Methods: POST,GET,OPTIONS
                                                       ...

        ------------------------------------------------->
        POST / HTTP/1.1
        origin: http://foo.com
        ...

        <-------------------------------------------------
                                           HTTP/1.1 200 OK
               Access-Control-Allow-Origin: http://foo.com
                                                       ...
  * Read more about CORS at:
    * https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS

* SOP exceptions: CSS, audio, video, embed,
  * similar to scripts or iframes


A few attacks that work around SOP

* #1: XSS (Cross-site Scripting) attack
  * Consider sites that show users profile (say, WeChat)
    * Attacker posts a profile like this:
        <script> ... </script>
    * I view the profile.
    * If the site didn't prevent this:
      * Now attacker's JavaScript code is running in my browser.
        Is that bad? After all the browser sandboxes JS.
      * The real problem is that attacker's code is running with
        the origin of the surrounding page, e.g. WeChat
      * Attacker's JS can see my cookie with session ID!
        Can act as me, or send my cookie to the attacker.
    * We'll be discussing XSS attack in a future lecture

* #2: Clickjacking attack.
  * The browser treats user clicks as having full authority.
    * So it's vital that the user understand consequences of clicks.
    * Will it buy something on Taobao? Send e-mail? "Like"?
  * Main cues for user's understanding are visual.
    * So it's vital that page layout make click consequences clear.
    * Sadly, HTML isn't always helpful at ensuring clear visual cues.
    * Example:
      * attacker.com page includes IFRAME displaying taobao.com page.
        With a One-Click ordering button.
      * attacker.com makes the IFRAME transparent (!)
        <iframe style="opacity:0;" ...
      * attacker.com can paint anywhere on the page, including over IFRAME.
        e.g. "Click here for a free iPad!"
      * A click buys the item on amazon; no free iPad.
      * amazon frame invisible, so user can't see that something odd happened.
  * Defense:
    * X-Frame-Options: DENY header -- prohibits page in IFRAME.
    * Content-Security-Policy: frame-ancestors 'none'


More readings:
https://infosec.mozilla.org/guidelines/web_security
https://en.wikipedia.org/wiki/Content_Security_Policy
https://en.wikipedia.org/wiki/Cross-origin_resource_sharing
https://en.wikipedia.org/wiki/Strict_Transport_Security
https://www.w3.org/TR/SRI/
https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe
https://owasp.org/www-project-top-ten/












